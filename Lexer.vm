function Lexer.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
// let string = s;
push argument 0
pop this 0
// let tokenType = 0;
push constant 0
pop this 1
// let startOffset = 0;
push constant 0
pop this 2
// let endOffset = 0;
push constant 0
pop this 3
// let len = string.length();
push this 0
call String.length 1
pop this 4
// return this;
push pointer 0
return
function Lexer.tokenType 0
push argument 0
pop pointer 0
// return tokenType;
push this 1
return
function Lexer.startOffset 0
push argument 0
pop pointer 0
// return startOffset;
push this 2
return
function Lexer.endOffset 0
push argument 0
pop pointer 0
// return endOffset;
push this 3
return
function Lexer.next 1
push argument 0
pop pointer 0
// let startOffset = endOffset;
push this 3
pop this 2
// while (endOffset < len) {
label Lexer.L0
push this 3
push this 4
lt
not
if-goto Lexer.L1
// let c = string.charAt(endOffset);
push this 0
push this 3
call String.charAt 2
pop local 0
// inc endOffset;
push this 3
push constant 1
add
pop this 3
// if (c < 33) {
push local 0
push constant 33
lt
if-goto Lexer.L2
goto Lexer.L3
label Lexer.L2
// let startOffset = endOffset;
push this 3
pop this 2
goto Lexer.L4
label Lexer.L3
// if ((c = 46) | ((c > 47) & (c < 58))) {
push local 0
push constant 46
eq
push local 0
push constant 47
gt
push local 0
push constant 58
lt
and
or
if-goto Lexer.L5
goto Lexer.L6
label Lexer.L5
// let tokenType = 1;
push constant 1
pop this 1
// do consumeNumeric();
push pointer 0
call Lexer.consumeNumeric 1
pop temp 0
// return true;
push constant 0
not
return
label Lexer.L6
// if ((c = 42) | (c = 43) | (c = 45) | (c = 47)) {
push local 0
push constant 42
eq
push local 0
push constant 43
eq
or
push local 0
push constant 45
eq
or
push local 0
push constant 47
eq
or
if-goto Lexer.L7
goto Lexer.L8
label Lexer.L7
// let tokenType = 2;
push constant 2
pop this 1
// return true;
push constant 0
not
return
label Lexer.L8
// if (c = 40) {
push local 0
push constant 40
eq
if-goto Lexer.L9
goto Lexer.L10
label Lexer.L9
// let tokenType = 3;
push constant 3
pop this 1
// return true;
push constant 0
not
return
label Lexer.L10
// if (c = 41) {
push local 0
push constant 41
eq
if-goto Lexer.L11
goto Lexer.L12
label Lexer.L11
// let tokenType = 4;
push constant 4
pop this 1
// return true;
push constant 0
not
return
label Lexer.L12
// let tokenType = 0;
push constant 0
pop this 1
// return true;
push constant 0
not
return
label Lexer.L4
goto Lexer.L0
label Lexer.L1
// return false;
push constant 0
return
function Lexer.consumeNumeric 1
push argument 0
pop pointer 0
// while (endOffset < len) {
label Lexer.L13
push this 3
push this 4
lt
not
if-goto Lexer.L14
// let c = string.charAt(endOffset);
push this 0
push this 3
call String.charAt 2
pop local 0
// if ((~(c = 46)) & ((c < 48) | (c > 57))) {
push local 0
push constant 46
eq
not
push local 0
push constant 48
lt
push local 0
push constant 57
gt
or
and
if-goto Lexer.L15
goto Lexer.L16
label Lexer.L15
// return;
push constant 0
return
label Lexer.L16
// inc endOffset;
push this 3
push constant 1
add
pop this 3
goto Lexer.L13
label Lexer.L14
// return;
push constant 0
return
function Lexer.dispose 0
push argument 0
pop pointer 0
// do Memory.deAlloc(this);
push pointer 0
call Memory.deAlloc 1
pop temp 0
// return;
push constant 0
return
